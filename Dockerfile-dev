# 
# Copyright Etherniti. All Rights Reserved.
# SPDX-License-Identifier: Apache 2
# 

FROM preloader:latest as compiler

MAINTAINER team@etherniti.org

LABEL IMAGE=proxy-etherniti
LABEL PROJECT=etherniti
LABEL VERSION=1.1

# production build parameters
ARG BASE=/go/src/github.com/zerjioang/etherniti
ARG BUILD_MODE=prod
ARG BUILD_EDITION=oss
ARG BUILD_VERSION=latest
ARG FILE=proxy
ARG ETHERNITI_GOOS=linux
ARG ETHERNITI_GOARCH=amd64
ARG TARGET_USER=etherniti
ARG TARGET_GROUP=ethergroup
ARG RESOURCE_DIR=/go/src/github.com/zerjioang/etherniti/testdata

# add source code to docker image for multistage build
WORKDIR                 $BASE
COPY                  . $BASE

# optimize code for production compilation
RUN echo "Preparing code for production deployment" && \
    chmod +x ./scripts/prepare_production.sh && \
    ././scripts/prepare_production.sh && \
    rm ./scripts/prepare_production.sh && \
    echo "create user and compile" && \
    addgroup ${TARGET_GROUP} && \
    adduser --system --no-create-home --gecos "'${TARGET_GROUP}'" --disabled-password -q ${TARGET_USER} && \
    ./scripts/docker/compile_build.sh ${FILE} && \
    rm -rf .git && \
    upx -9 -v $FILE && \
    ls -alh

FROM ethereum/solc:stable as solcompiler

# BEGIN: install modified version of glibc
FROM alpine:3.10.2

# inject here your GLIBC code if needed

ARG X_ETHERNITI_INTERACTION_PORT="8080 4430"
ARG TARGET_USER=etherniti
ARG TARGET_GROUP=ethergroup
ARG EXEC=proxy
ARG BASE=src/github.com/zerjioang/etherniti
ARG TESTDATA=${BASE}/testdata
ARG BASEDIR=/var/lib/etherniti

ENV GOPATH=${BASEDIR}/go
ENV PATH="${BASEDIR}/:${PATH}"
ENV USER=${TARGET_USER}
WORKDIR ${BASEDIR}

# copy hardening script
COPY ./scripts/docker/hardening.sh ${BASEDIR}/hardening.sh

# create user $TARGET_USER
# create dirs
# and run hardening script
RUN mkdir -p ${BASEDIR} && \
    addgroup -S ${TARGET_GROUP} && \
    adduser -S ${TARGET_USER} -G ${TARGET_GROUP} && \
    mkdir -p $GOPATH/src/github.com/zerjioang/etherniti/testdata && \
    mkdir -p ${BASEDIR}/data && \
    chmod +x hardening.sh && ./hardening.sh && rm hardening.sh

# copy proxy resource files
# make sure to use same names as TARGET_USER and TARGET_GROUP

# copy solc executable file
COPY --from=solcompiler /usr/bin/solc   /usr/bin/solc
COPY --from=compiler --chown=etherniti:ethergroup /go/${TESTDATA}/       ${GOPATH}/${TESTDATA}/
COPY --from=compiler --chown=etherniti:ethergroup /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt
COPY --from=compiler --chown=etherniti:ethergroup /go/${BASE}/proxy ${EXEC}

EXPOSE ${X_ETHERNITI_INTERACTION_PORT}

# apply correct permissions
RUN chmod +rwx -R ${BASEDIR} && \
    chown -R ${TARGET_USER}:${TARGET_GROUP} ${BASEDIR} && \
    ls -alh && \
    stat ${BASEDIR}/data

# change to non root user for execution
USER ${TARGET_USER}

# set container entrypoint
CMD ["proxy"]
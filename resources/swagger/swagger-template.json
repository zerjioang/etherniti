{
  "swagger": "2.0",
  "info": {
    "description": "$title definition",
    "version": "$version",
    "title": "$title",
    "termsOfService": "https://www.etherniti.org/docs/terms-of-service/",
    "contact": {
      "email": "core@etherniti.org"
    },
    "license": {
      "name": "Etherniti License",
      "url": "https://www.etherniti.org/docs/license/"
    },
    "x-apisguru-categories": [
      "iot",
      "ethereum",
      "blockchain"
    ],
    "x-logo": {
      "url": "/favicon.png",
      "backgroundColor": "#FFFFFF"
    },
    "x-preferred": true,
    "x-providerName": "etherniti.org"
  },
  "host": "$host",
  "basePath": "$basepath",
  "consumes": [
    "application/json;charset=utf-8"
  ],
  "produces": [
    "application/json;charset=utf-8"
  ],
  "tags": [{
    "name": "public",
    "description": "Public Ethereum REST API Proxy operations",
    "externalDocs": {
      "description": "Find out more about Etherniti, an Ethereum REST API public operations at",
      "url": "https://www.etherniti.org/docs/api/public-operations/"
    }
  },
    {
      "name": "profile",
      "description": "Ethereum REST API Proxy connection profile management",
      "externalDocs": {
        "description": "Find out more about Etherniti, an Ethereum REST API public operations at",
        "url": "https://www.etherniti.org/docs/api/profile-management/"
      }
    },
    {
      "name": "wallet",
      "description": "Ethereum REST API Proxy wallet service",
      "externalDocs": {
        "description": "Find out more about Etherniti, an Ethereum REST API public operations at",
        "url": "https://www.etherniti.org/docs/api/wallet/"
      }
    },
    {
      "name": "private",
      "description": "Ethereum REST API Proxy context dependant services",
      "externalDocs": {
        "description": "Find out more about Etherniti, an Ethereum REST API public operations at",
        "url": "https://www.etherniti.org/docs/api/private"
      }
    },
    {
      "name": "security",
      "description": "Ethereum REST API Proxy security services",
      "externalDocs": {
        "description": "Find out more about Etherniti, an Ethereum REST API security services at",
        "url": "https://www.etherniti.org/docs/api/security"
      }
    },
    {
      "name": "web3",
      "description": "Ethereum REST API Proxy web3 implementation",
      "externalDocs": {
        "description": "Find out more about Etherniti, an Ethereum REST API web3 implementation at",
        "url": "https://www.etherniti.org/docs/api/web3"
      }
    },
    {
      "name": "solc",
      "description": "Ethereum REST API Proxy solc compiler implementation",
      "externalDocs": {
        "description": "Find out more about Etherniti, an Ethereum REST API solc compiler implementation at",
        "url": "https://www.etherniti.org/docs/api/solc"
      }
    },
    {
      "name": "cns",
      "description": "Ethereum REST API Contract Name Service implementation",
      "externalDocs": {
        "description": "Find out more about Etherniti, an Ethereum REST API Contract Name Service implementation at",
        "url": "https://www.etherniti.org/docs/api/cns"
      }
    }
  ],
  "schemes": ["http", "https", "unix"],
  "paths": {
    "/public": {
      "get": {
        "tags": ["public"],
        "summary": "Proxy welcome message",
        "description": "proxy welcome message or index message",
        "operationId": "index",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "deprecated": false,
        "parameters": [],
        "responses": {
          "200": {
            "description": "proxy welcome message",
            "schema": {
              "example": {
                "name": "eth-wbapi",
                "description": "Etherniti: Ethereum Multitenant API",
                "cluster_name": "eth-wbapi",
                "version": "0.0.1",
                "env": "development",
                "tagline": "dapps everywhere"
              }
            }
          }
        }
      }
    },
    "/public/status": {
      "get": {
        "tags": ["public"],
        "summary": "Proxy health status",
        "description": "Read proxy instance interal metrics and health status",
        "operationId": "status",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "deprecated": false,
        "parameters": [],
        "responses": {
          "200": {
            "description": "proxy internal metrics collection",
            "schema": {
              "example": {
                "alloc": 1843848,
                "cpus": 2,
                "disk": {
                  "all": 45.61288070678711,
                  "free": 43.18564224243164,
                  "used": 2.4272384643554688
                },
                "frees": 3364,
                "heapalloc": 1843848,
                "mallocs": 6574,
                "numForcedGC": 0,
                "numgc": 3,
                "runtime": {
                  "compiler": "gc",
                  "version": "go1.11.5"
                },
                "sys": 71760120,
                "total": 8893712,
                "version": {
                  "etherniti": "0.0.1",
                  "http": "3.3.10-dev"
                }
              }
            }
          }
        }
      }
    },
    "/public/integrity": {
      "get": {
        "tags": ["public"],
        "summary": "Check remote proxy integrity status",
        "description": "Get digitally signed integrity message from proxy instance can compare signature validity with provided public key",
        "operationId": "integrity",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "deprecated": false,
        "parameters": [],
        "responses": {
          "200": {
            "description": "proxy integrity response",
            "schema": {
              "example": {
                "message": "Hello from Etherniti Proxy. Today message generated at 2019-03-25T10:46:35+01:00",
                "millis": "1553507195",
                "hash": "a9e6b0dd821862e184bfaaa16a6a8af7e802330bef2978267910076acef29500",
                "signature": "303c021c538c3ac6685239032cbdf64f6d079d48c18da3e536bfe0ced278a132021c10c6acc3bb9b6b745e729544ffb1b19ddd2706095523d152dfeefce6"
              }
            }
          }
        }
      }
    },
    "/public/profile": {
      "post": {
        "tags": ["profile"],
        "summary": "Create a connection profile using prefered provider",
        "description": "Create a connection profile using prefered provider. Choose between, public node, private node, infura, etc",
        "operationId": "profile",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "deprecated": false,
        "parameters": [{
          "in": "body",
          "required": true,
          "name": "profile",
          "schema": {
            "example": {
              "networkId": 1,
              "peer": "http://172.168.0.2",
              "mode": "geth",
              "port": 8545,
              "address": "0xE720c341bd664A8F7ebC3f75CCE93BD6ba6d7654",
              "key": "a2821a66b157b1bd98bb872dd14786f989ea345f700073a3bdb579102edb84c7"
            }
          }
        }],
        "responses": {
          "200": {
            "description": "profile creation response",
            "schema": {
              "example": {
                "id": 0,
                "code": 200,
                "msg": "profile token successfully created",
                "result": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
              }
            }
          }
        }
      }
    },
    "/public/profile/count": {
      "get": {
        "tags": ["profile"],
        "summary": "Count created profiles",
        "description": "Get the number of profiles created in last cycle",
        "operationId": "profile-count",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "deprecated": false,
        "parameters": [],
        "responses": {
          "200": {
            "description": "profile count response",
            "schema": {
              "example": 10
            }
          }
        }
      }
    },
    "/public/wallet/mnemonic/bip39": {
      "post": {
        "tags": ["wallet"],
        "summary": "Generate a bip39 mnemonic",
        "description": "Generate a bip39 mnemonic with given customization details such as language, length, etc",
        "operationId": "mnemonic-bip39",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "deprecated": false,
        "parameters": [{
          "in": "body",
          "required": true,
          "name": "configuration",
          "schema": {
            "example": {
              "language": "english",
              "size": 128
            }
          }
        }],
        "responses": {
          "200": {
            "description": "mnemonic response",
            "schema": {
              "example": {
                "id": 0,
                "code": 200,
                "msg": "mnemonic successfully created",
                "result": "acid coin captain hen eyebrow donor surround jar mirror copper leisure shield"
              }
            }
          }
        }
      }
    },
    "/public/wallet/entropy/{bits}": {
      "get": {
        "tags": ["wallet"],
        "summary": "Get a entropy of N bits",
        "description": "Get a entropy data from secured source such as /dev/random",
        "operationId": "mnemonic-entropy",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "deprecated": false,
        "parameters": [{
          "in": "path",
          "required": true,
          "name": "bits",
          "description": "Requested entropy bit size",
          "type": "number",
          "schema": {
            "example": 192
          }
        }],
        "responses": {
          "200": {
            "description": "entropy data response",
            "schema": {
              "example": {
                "id": 0,
                "code": 200,
                "msg": "entropy data generated",
                "result": {
                  "entropy": "abWCKX7EmwiIWxKTnQMIZjisv5Y="
                }
              }
            }
          }
        }
      }
    },
    "/public/wallet/new": {
      "post": {
        "tags": ["wallet"],
        "summary": "Generate a new Ethereum compatible account",
        "description": "Generate a new Ethereum compatible account and get its address and key",
        "operationId": "new-account",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "deprecated": false,
        "parameters": [],
        "responses": {
          "200": {
            "description": "account creation response",
            "schema": {
              "example": {
                "id": 0,
                "code": 200,
                "msg": "ethereum account created",
                "result": {
                  "address": "0xE720c341bd664A8F7ebC3f75CCE93BD6ba6d7654",
                  "private": "a2821a66b157b1bd98bb872dd14786f989ea345f700073a3bdb579102edb84c7"
                }
              }
            }
          }
        }
      }
    },
    "/public/wallet/verify/{address}": {
      "get": {
        "tags": ["wallet"],
        "summary": "Verify Ethereum address",
        "description": "Verify if given Ethereum address is valid or not",
        "operationId": "verify-address",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "deprecated": false,
        "parameters": [{
          "in": "path",
          "name": "address",
          "description": "Ethereum address to be validated",
          "schema": {
            "example": "0xE720c341bd664A8F7ebC3f75CCE93BD6ba6d7654"
          }
        }],
        "responses": {
          "200": {
            "description": "verification response",
            "schema": {
              "example": {
                "id": 0,
                "code": 200,
                "msg": "address validation checked",
                "result": true
              }
            }
          }
        }
      }
    },
    "/private/eth/is/contract/{address}": {
      "get": {
        "tags": ["wallet", "private"],
        "summary": "Verify if Ethereum address is a contract",
        "description": "Verify if given Ethereum address is a contract holder address or not",
        "operationId": "has-contract",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "deprecated": false,
        "security": [{
          "connectionProfileToken": []
        }],
        "parameters": [{
          "in": "path",
          "name": "address",
          "description": "Ethereum address to be validated",
          "schema": {
            "example": "0xE720c341bd664A8F7ebC3f75CCE93BD6ba6d7654"
          }
        }],
        "responses": {
          "200": {
            "description": "verification response",
            "schema": {
              "example": {
                "id": 0,
                "code": 200,
                "msg": "address validation checked",
                "result": true
              }
            }
          },
          "400": {
            "$ref": "#responses/ProfileInvalidError"
          }
        }
      }
    },
    "/public/security/domains/blacklist": {
      "get": {
        "tags": ["security"],
        "summary": "Blacklisted domain list",
        "description": "Get a list of Blacklisted domain based on OSINT (Open Source Intelligence)",
        "operationId": "security-domains",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "deprecated": false,
        "parameters": [],
        "responses": {
          "200": {
            "description": "blacklisted domain list",
            "schema": {
              "example": ["a", "b", "..."]
            }
          }
        }
      }
    },
    "/public/security/phishing/blacklist": {
      "get": {
        "tags": ["security"],
        "summary": "Blacklisted phishing list",
        "description": "Get a list of Blacklisted phishing domains based on OSINT (Open Source Intelligence)",
        "operationId": "phishing-blacklist-domains",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "deprecated": false,
        "parameters": [],
        "responses": {
          "200": {
            "description": "blacklisted phishing domain list",
            "schema": {
              "example": ["a", "b", "..."]
            }
          }
        }
      }
    },
    "/public/security/phishing/whitelist": {
      "get": {
        "tags": ["security"],
        "summary": "Whitelist phishing list",
        "description": "Get a list of whitelisted phishing domains based on OSINT (Open Source Intelligence)",
        "operationId": "phishing-whitelist-domains",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "deprecated": false,
        "parameters": [],
        "responses": {
          "200": {
            "description": "whitelisted phishing domain list",
            "schema": {
              "example": ["a", "b", "..."]
            }
          }
        }
      }
    },
    "/public/security/domain/check/{domain}": {
      "get": {
        "tags": ["security"],
        "summary": "Check domain name status",
        "description": "Check the trust level of given domain and stop scamming and malware attempts",
        "operationId": "phishing-check",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "deprecated": false,
        "parameters": [{
          "in": "path",
          "name": "domain",
          "description": "suspicious domain name to be scanned",
          "schema": {
            "example": "my.suspicious.domain.tld"
          }
        }],
        "responses": {
          "200": {
            "description": "suspicious domain analysis results",
            "schema": {
              "example": {
                "id": 0,
                "code": 200,
                "msg": "domain analyzed",
                "result": {
                  "domain": "my.suspicious.wallet.domain.tld",
                  "trust": false,
                  "score": 7,
                  "title": "Deceptive domain detected",
                  "message": "The domain you requested has been identified as being potentially problematic. This could be because a user has reported a problem, a black-list service reported a problem, or because we have detected potentially malicious content."
                }
              }
            }
          }
        }
      }
    },
    "/public/solc/version": {
      "get": {
        "tags": ["solc"],
        "summary": "Solidity compiler version",
        "description": "Get the version of Solidity compiler",
        "operationId": "solc-version",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "deprecated": false,
        "parameters": [],
        "responses": {
          "200": {
            "description": "Solidity Solc compiler version response",
            "schema": {
              "example": {
                "id": 0,
                "code": 200,
                "msg": "solc version",
                "result": {
                  "path": "/usr/bin/solc",
                  "version": "0.4.24",
                  "full_version": "solc, the solidity compiler commandline interface\nVersion: 0.4.24+commit.e67f0147.Linux.g++\n",
                  "major": 0,
                  "minor": 4,
                  "patch": 24
                }
              }
            }
          },
          "400": {
            "description": "Solidity Solc bad request response",
            "schema": {
              "example": {
                "code": 400,
                "msg": "Bad Request",
                "details": "failed to get solc version"
              }
            }
          }
        }
      }
    },
    "/public/solc/compile/{mode}": {
      "post": {
        "tags": ["solc"],
        "summary": "Compile a contract using solc",
        "description": "Compile a contract using solc",
        "operationId": "solc-compile",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "mode",
            "description": "solc compiler allowed modes",
            "enum": ["single-raw", "single-base64", "git", "zip", "targz"],
            "required": true
          },
          {
            "in": "body",
            "type": "string",
            "name": "contract",
            "description": "solidity base64 encoded contract source code",
            "required": true,
            "example": {
              "contract": "cHJhZ21hIHNvbGlkaXR5ID49MC40LjIyIDwwLjYuMDsKCmNvbnRyYWN0IE1vcnRhbCB7CiAgICAvKiBEZWZpbmUgdmFyaWFibGUgb3duZXIgb2YgdGhlIHR5cGUgYWRkcmVzcyAqLwogICAgYWRkcmVzcyBvd25lcjsKCiAgICAvKiBUaGlzIGNvbnN0cnVjdG9yIGlzIGV4ZWN1dGVkIGF0IGluaXRpYWxpemF0aW9uIGFuZCBzZXRzIHRoZSBvd25lciBvZiB0aGUgY29udHJhY3QgKi8KICAgIGNvbnN0cnVjdG9yKCkgcHVibGljIHsgb3duZXIgPSBtc2cuc2VuZGVyOyB9CgogICAgLyogRnVuY3Rpb24gdG8gcmVjb3ZlciB0aGUgZnVuZHMgb24gdGhlIGNvbnRyYWN0ICovCiAgICBmdW5jdGlvbiBraWxsKCkgcHVibGljIHsgaWYgKG1zZy5zZW5kZXIgPT0gb3duZXIpIHNlbGZkZXN0cnVjdChtc2cuc2VuZGVyKTsgfQp9Cgpjb250cmFjdCBHcmVldGVyIGlzIE1vcnRhbCB7CiAgICAvKiBEZWZpbmUgdmFyaWFibGUgZ3JlZXRpbmcgb2YgdGhlIHR5cGUgc3RyaW5nICovCiAgICBzdHJpbmcgZ3JlZXRpbmc7CgogICAgLyogVGhpcyBydW5zIHdoZW4gdGhlIGNvbnRyYWN0IGlzIGV4ZWN1dGVkICovCiAgICBjb25zdHJ1Y3RvcihzdHJpbmcgbWVtb3J5IF9ncmVldGluZykgcHVibGljIHsKICAgICAgICBncmVldGluZyA9IF9ncmVldGluZzsKICAgIH0KCiAgICAvKiBNYWluIGZ1bmN0aW9uICovCiAgICBmdW5jdGlvbiBncmVldCgpIHB1YmxpYyB2aWV3IHJldHVybnMgKHN0cmluZyBtZW1vcnkpIHsKICAgICAgICByZXR1cm4gZ3JlZXRpbmc7CiAgICB9Cn0K"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Solidity Solc Compiler compilation response",
            "schema": {
              "example": {
                "id": 0,
                "code": 200,
                "msg": "solc version",
                "result": {
                  "abi": "",
                  "bin":"",
                  "version":""
                }
              }
            }
          },
          "400": {
            "description": "Solidity Solc bad request response",
            "schema": {
              "example": {
                "code": 400,
                "msg": "Bad Request",
                "details": "unknown mode selected. Allowed modes are: single, git, zip, targz"
              }
            }
          }
        }
      }
    },
    "/public/cns": {
      "post": {
        "tags": ["cns"],
        "summary": "Register new contract details",
        "description": "Register new contract details",
        "operationId": "cns-register",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "deprecated": false,
        "parameters": [{
          "in": "body",
          "name": "data",
          "description": "contract information to be registered",
          "required": true,
          "example": {
            "name": "test-contract",
            "description": "test contract description",
            "address": "0xf17f52151EbEF6C7334FAD080c5704D77216b732",
            "version": "1.0"
          }
        }],
        "responses": {
          "200": {
            "description": "Contract Name Service registration response",
            "schema": {
              "example": {
                "id": 0,
                "code": 200,
                "msg": "contract successfully registered in naming service",
                "result": "test-contract-1.0"
              }
            }
          }
        }
      }
    },
    "/public/cns/{id}": {
      "get": {
        "tags": ["cns"],
        "summary": "Get existing contract details given its ID",
        "description": "Get existing contract details",
        "operationId": "cns-resolve",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "deprecated": false,
        "parameters": [{
          "in": "path",
          "type": "string",
          "required": true,
          "description": "id of the contract to be fetch",
          "name": "id"
        }],
        "responses": {
          "200": {
            "description": "Contract Name Service response",
            "schema": {
              "example": {
                "id": 0,
                "code": 200,
                "msg": "contract information successfully resolved",
                "result": {
                  "name": "test-contract",
                  "description": "test contract description",
                  "address": "0xf17f52151EbEF6C7334FAD080c5704D77216b732",
                  "version": "1.0"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["cns"],
        "summary": "Delete existing contract information given its ID",
        "description": "Delete existing contract details",
        "operationId": "cns-delete",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "deprecated": false,
        "parameters": [{
          "in": "path",
          "type": "string",
          "required": true,
          "description": "id of the contract to be deleted",
          "name": "id"
        }],
        "responses": {
          "200": {
            "description": "Contract Name Service record delete response",
            "schema": {
              "example": {
                "id": 0,
                "code": 200,
                "msg": "contract successfully unregistered from naming service",
                "result": "test-contract-1.0"
              }
            }
          }
        }
      }
    },
    "/public/{network}/net/version": {
      "get": {
        "tags": ["web3"],
        "summary": "Get network version information",
        "description": "Get target Ethereum or Quorum network version details",
        "operationId": "net-version",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "deprecated": false,
        "security": [{
          "connectionProfileToken": []
        }],
        "parameters": [{
          "in": "path",
          "name": "network",
          "description": "target web3 protocol compatible network",
          "type": "string",
          "enum": ["ropsten", "rinkeby", "kovan", "mainnet"],
          "example": "ropsten",
          "required": true
        }],
        "responses": {
          "200": {
            "description": "ethereum net version information response",
            "schema": {
              "example": {
                "id": 0,
                "code": 200,
                "msg": "net_version",
                "result": "3"
              }
            }
          },
          "400": {
            "$ref": "#responses/ProfileInvalidError"
          }
        }
      }
    },
    "/public/{network}/client/version": {
      "get": {
        "tags": ["web3"],
        "summary": "Get network client version information",
        "description": "Get target Ethereum or Quorum network client version details",
        "operationId": "client-version",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "deprecated": false,
        "security": [{
          "connectionProfileToken": []
        }],
        "parameters": [{
          "in": "path",
          "name": "network",
          "description": "target web3 protocol compatible network",
          "type": "string",
          "enum": ["ropsten", "rinkeby", "kovan", "mainnet"],
          "example": "ropsten",
          "required": true
        }],
        "responses": {
          "200": {
            "description": "ethereum net client version information response",
            "schema": {
              "example": {
                "id": 0,
                "code": 200,
                "msg": "web3_clientVersion",
                "result": "Geth/v1.8.22-omnibus-260f7fbd/linux-amd64/go1.11.1"
              }
            }
          },
          "400": {
            "$ref": "#responses/ProfileInvalidError"
          }
        }
      }
    },
    "/public/{network}/net/peers": {
      "get": {
        "tags": ["web3"],
        "summary": "Get network peers",
        "description": "Get target Ethereum or Quorum network peers details",
        "operationId": "net-peers",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "deprecated": false,
        "security": [{
          "connectionProfileToken": []
        }],
        "parameters": [{
          "in": "path",
          "name": "network",
          "description": "target web3 protocol compatible network",
          "type": "string",
          "enum": ["ropsten", "rinkeby", "kovan", "mainnet"],
          "example": "ropsten",
          "required": true
        }],
        "responses": {
          "200": {
            "description": "ethereum network peer information response",
            "schema": {
              "example": {
                "id": 0,
                "code": 200,
                "msg": "net_peerCount",
                "result": "0x64"
              }
            }
          },
          "400": {
            "$ref": "#responses/ProfileInvalidError"
          }
        }
      }
    },
    "securityDefinitions": {
      "connectionProfileToken": {
        "type": "apiKey",
        "description": "Connection profile definition access token for Etherniti REST API Proxy",
        "name": "$header-auth-key",
        "in": "header"
      }
    },
    "responses": {
      "ProfileInvalidError": {
        "description": "Connection Profile token is missing, was expired or is invalid",
        "schema": {
          "example": {
            "code": 400,
            "msg": "Bad Request",
            "details": "please provide a connection profile token for this kind of call"
          }
        }
      }
    },
    "definitions": {},
    "externalDocs": {
      "description": "Find out more about Etherniti, an Ethereum REST API Proxy at https://www.etherniti.org",
      "url": "https://www.etherniti.org"
    }
  }
}